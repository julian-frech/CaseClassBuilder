name: Scala CI and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensures Git history is available for sbt-git

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        java-version: '8.0.402+6'
        distribution: 'temurin'
    
    - name: Extract version from tag
      id: extract_version
      run: echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/v}"


    - name: Cache sbt
      uses: actions/cache@v3
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}
        restore-keys: ${{ runner.os }}-sbt-

    - name: Build with sbt
      run: sbt package

    - name: Determine JAR file name
      id: jar_name
      run: echo "JAR_NAME=$(sbt -no-colors 'print version' | tail -1)-$(sbt -no-colors 'print scalaBinaryVersion' | tail -1).jar" >> $GITHUB_ENV

    - name: List JAR files
      run: ls -l ./target/scala-2.12/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/scala-2.12/caseclassbuilder_2.12-${{ steps.extract_version.outputs.VERSION }}.jar
        asset_name: caseclassbuilder_2.12-${{ steps.extract_version.outputs.VERSION }}.jar
        asset_content_type: application/java-archive
